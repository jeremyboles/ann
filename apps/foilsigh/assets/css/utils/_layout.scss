// -----------------------------------------------------------------------------------------------
//
// Layout SASS Mix-Ins
//
// -----------------------------------------------------------------------------------------------

@use 'sass:map';
@use 'sass:math';

@use "./grid";
@use "./scale";
@use "./val";

//
// Centers all of the children
// -----------------------------------------------------------------------------------------------

@mixin center {
  align-items: center;
  display: flex;
  flex-direction: column;
}

//
// Clusters all of the children in row, wrapping predictably
// -----------------------------------------------------------------------------------------------

@mixin cluster($space: val.fragments(2), $justify: start) {
  align-items: var(--cluster-align, center);
  display: flex;
  flex-wrap: wrap;
  gap: var(--cluster-space, #{$space});
  justify-content: var(--cluster-justify, #{$justify});
}

//
// Provides flow and rhythm between direct sibling elements.
// -----------------------------------------------------------------------------------------------

@mixin flow($space: val.rhythm(1)) {
  & > * + * {
    margin-block-start: var(--flow-space, #{$space});
  }
}

//
// Sets up a column grid
// -----------------------------------------------------------------------------------------------

@mixin grid($space-thin: val.fragments(2), $space-wide: val.rhythm(1), $initialize-columns: true) {
  --grid-space: var(--grid-space-thin, #{$space-thin});
  display: grid;
  gap: var(--grid-space);

  @each $count in map.keys(grid.$columns) {
    @include grid.columns($count) {
      @if $count == 6 {
        --grid-space: var(--grid-space-wide, #{$space-wide});
      }
      grid-template-columns: repeat($count, 1fr) !important;
    }
  }

  @if $initialize-columns {
    & > * {
      grid-column-start: 1;
      grid-column-end: -1;
    }
  }
}

//
// Center its content, constraining its width so it doesn't grow too large
// -----------------------------------------------------------------------------------------------

@mixin wrapper($max: math.div(scale.$max-width, 16) + rem, $thin-space: val.fragments(2), $wide-space: val.rhythm(1)) {
  margin-inline: auto;
  max-inline-size: #{$max};
  padding-inline-end: calc(var(--wrapper-space, #{$thin-space}) + env(safe-area-inset-right));
  padding-inline-start: calc(var(--wrapper-space, #{$thin-space}) + env(safe-area-inset-left));

  @include grid.columns(6) {
    padding-inline-end: calc(var(--wrapper-space, #{$wide-space}) + env(safe-area-inset-right));
    padding-inline-start: calc(var(--wrapper-space, #{$wide-space}) + env(safe-area-inset-left));
  }
}

//
// Visually hide an element, but make it available to screen readers
// -----------------------------------------------------------------------------------------------

@mixin visually-hidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: auto;
  margin: 0;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
  white-space: nowrap;
}
