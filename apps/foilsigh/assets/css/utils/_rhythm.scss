@use "sass:math";

//
// Base settings
// -------------------------------------------------------------------------------------------------

// The Plastic Number: https://handwiki.org/wiki/Plastic_number
// 1.324717957244746025960908854
// The Padovan Sequence: https://en.wikipedia.org/wiki/Padovan_sequence
// 1, 1, 1, 2, 2, 3, 4, 5, 7, 9, 12, 16, 21, 28, 37, 49, 65, 86, 114, 151, 200, 265, 351, 465, 616, 816, 1081, 1432, 1897, 2513, 3329

// Base font size in pixels. The value is currently set to the fifth value in the silver
// ratio sequence.
$base-font-size: 16px;

// Modular scale typographic ratio is used to figure out all the different font sizes in harmony.
// The value is currently set to the plastic number.
$ratio: 1.324717957244746025960908854;

// The vertical grid fragment. Margin, padding, and line-height are set to multiples
// of this value. This is the value that determines the baseline for our vertical
// rhythm. The value is currently set to the fourth value in the silver ratio sequence.
$fragment-height: 5px;

// The number of spacing-fragments that are each line of text, giving us an ideal line-height.
// The value is currently set to the third value in the silver ratio sequence.
$fragments-per-line: 4 !default;

//
// Functions
// -------------------------------------------------------------------------------------------------

// Returns an EM value. For example 24px becomes 1.5em
@function em($target, $scale: 0) {
  @return strip-unit(math.div($target, $base-font-size)) + 0em;
}

// Returns an EM value that is a multiple of our defined base vertical fragment height.
@function fragments($count, $scale: 0) {
  @return unitless(strip-unit($count), $scale) + 0em;
}

// Check if value is an integer and returns true or false
@function is-int($number) {
  @return type-of($number) == number and floor(abs($number)) == abs($number);
}

// Returns an EM value that is a multiple of our fragments per line
@function lines($count, $scale: 0) {
  @return unitless(strip-unit($count) * $fragments-per-line, $scale) + 0em;
}

// Returns a the value of for the given step in the module scale
@function scale($scale: 0) {
  @return math.pow($ratio, $scale);
}

// Returns a number without a unit. For example 16px becomes 16
@function strip-unit($number) {
  @return math.div($number, $number * 0 + 1);
}

// Returns a unit-less number that is a multiple of our defined base vertical unit.
// For example 3 becomes 1.125
@function unitless($count, $scale: 0) {
  @if is-int($count) == false {
    @warn #{$count} + ' value breaks vertical rhythm. Use an integer (whole number) for $count.';
  }

  $base: strip-unit(scale($scale)) * strip-unit($base-font-size);
  @return math.div($count * strip-unit($fragment-height), $base);
}

//
// Mix-ins
// -------------------------------------------------------------------------------------------------

// Sets the font size along with the base line height
@mixin font-size($scale, $line-height: $fragments-per-line) {
  font-size: scale($scale) + 0em;
  line-height: unitless($line-height, $scale);
}

// Initializes the vertical rhythm
@mixin init {
  body {
    @include line-height;
    font-size: clamp(114%, 49% + 0.65vw, 151%);
  }

  html {
    font-size: math.div($base-font-size, 16px) * 100%;
    -ms-text-size-adjust: 100%;
    -webkit-text-size-adjust: 100%;
  }
}

// Creates a vertical rhythm unit-less line-height that is based on context
@mixin line-height($count: $fragments-per-line, $scale: 0) {
  line-height: unitless($count, $scale);
}

//
// Debugging
// -------------------------------------------------------------------------------------------------

@mixin debug {
  &::after,
  &::before {
    bottom: 0;
    content: '';
    display: block;
    left: 0;
    mix-blend-mode: color-burn;
    pointer-events: none;
    position: absolute;
    right: 0;
    top: 0;
  }

  &::before {
    background-image: linear-gradient(red 1px, transparent 1px);
    background-size: 100% unitless($fragments-per-line, $scale: 0) + 0em;
    opacity: 0.75;
    z-index: 10;

    @media (prefers-color-scheme: dark) {
      opacity: 0.5;
      mix-blend-mode: color-dodge;
    }
  }

  &::after {
    background-image: linear-gradient(red 1px, transparent 1px);
    background-size: 100% em($fragment-height);
    opacity: 0.5;
    z-index: 9;

    @media (prefers-color-scheme: dark) {
      opacity: 0.25;
      mix-blend-mode: color-dodge;
    }
  }
}
